{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/initiuns/\\xC1rea de Trabalho/WeatherAPI/weather-brainsss/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './components/weather.component';\nimport Form from './components/form.component'; // chamar api em api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\n\nconst API_key = \"235bda840484f67b319f6674921481e5\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async () => {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`);\n      const response = await api_call.json();\n      console.log(\"teste: \" + response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    }; // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        loadweather: this.getWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Weather, {\n        city: this.state.city,\n        country: this.state.country,\n        temp_celsius: this.state.celsius,\n        temp_max: this.state.temp_max,\n        temp_min: this.state.temp_min,\n        description: this.state.description,\n        weatherIcon: this.state.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/initiuns/Área de Trabalho/WeatherAPI/weather-brainsss/src/App.js"],"names":["React","Weather","Form","API_key","App","Component","constructor","getWeather","api_call","fetch","response","json","console","log","setState","city","name","country","sys","celsius","calCelsius","main","temp","temp_max","temp_min","description","weather","get_WeatherIcon","weatherIcon","id","state","undefined","icon","error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cell","Math","floor","icons","rangeId","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './components/weather.component';\nimport Form from './components/form.component';\n\n// chamar api em api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_key = \"235bda840484f67b319f6674921481e5\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch(true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n      break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n      break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon:this.weatherIcon.Rain});\n      break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n      break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n      break;\n\n      case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear});\n      break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n      break;\n\n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async () => {\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`\n    );\n  \n    const response = await api_call.json();\n\n    console.log(\"teste: \" + response);\n\n    this.setState({\n      city: response.name,\n      country: response.sys.country,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description\n    });\n\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  };\n\n  render() {\n    return (\n      <div className=\"App\"> \n        <Form loadweather = {this.getWeather} />\n        <Weather \n          city={this.state.city} \n          country = {this.state.country}\n          temp_celsius = {this.state.celsius}\n          temp_max = {this.state.temp_max} \n          temp_min = {this.state.temp_min}\n          description = {this.state.description}\n          weatherIcon = {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}