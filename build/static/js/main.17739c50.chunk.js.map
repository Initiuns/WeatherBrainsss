{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTA2BA,SAASA,EAAWC,EAAKC,GAErB,GAAGD,GAAOC,EACN,OACI,+BACI,uBAAMC,UAAU,OAAhB,UAAwBF,EAAxB,UACA,uBAAME,UAAU,OAAhB,UAAwBD,EAAxB,aAMDE,MArCC,SAACC,GACb,OACI,qBAAKF,UAAU,uBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,6BACKE,EAAMC,OAEX,oBAAIH,UAAU,OAAd,SACI,mBAAGA,UAAS,aAAQE,EAAME,YAAd,kBAIhBF,EAAMG,aACA,qBAAIL,UAAU,MAAd,UAAqBE,EAAMG,aAA3B,UAAsD,KAI3DR,EAAWK,EAAMI,SAAUJ,EAAMK,UAElC,oBAAIP,UAAU,OAAd,SAAsBE,EAAMM,oB,MCuB7BC,MAzCF,SAACP,GACV,OACI,sBAAKF,UAAU,YAAf,UACI,8BAAME,EAAMQ,MAgChB,qBAAKV,UAAU,0BAA0BW,KAAK,QAA9C,uDAhCkC,OAC9B,sBAAMC,SAAUV,EAAMW,YAAtB,SACI,sBAAKb,UAAU,MAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,uBACIc,KAAK,OACLd,UAAU,eACVe,KAAK,OACLC,aAAa,MACbC,YAAY,aAGpB,qBAAKjB,UAAU,WAAf,SACI,uBACIc,KAAK,OACLd,UAAU,eACVe,KAAK,UACLC,aAAa,MACbC,YAAY,cAGpB,qBAAKjB,UAAU,qCAAf,SACI,wBAAQA,UAAU,kBAAlB,8CCsGTkB,E,kDApHb,aAAe,IAAD,8BACZ,gBAiEFC,WAlEc,uCAkED,WAAOC,GAAP,qBAAAC,EAAA,yDAEXD,EAAEE,iBAEInB,EAAOiB,EAAEG,OAAOC,SAASrB,KAAKsB,MAC9BC,EAAUN,EAAEG,OAAOC,SAASE,QAAQD,OAEtCtB,IAAQuB,EAPD,iCAScC,MAAM,oDAAD,OAC0BxB,EAD1B,YACkCuB,EADlC,kBA/ElB,qCAsED,cASHE,EATG,gBAacA,EAASC,OAbvB,OAaHC,EAbG,OAeTC,QAAQC,IAAI,UAAYF,GAExB,EAAKG,SAAS,CACZ9B,KAAK,GAAD,OAAK2B,EAASf,KAAd,aAAuBe,EAASI,IAAIR,SACxCS,QAAS,EAAKC,WAAWN,EAASO,KAAKC,MACvC/B,SAAU,EAAK6B,WAAWN,EAASO,KAAK9B,UACxCD,SAAU,EAAK8B,WAAWN,EAASO,KAAK/B,UACxCE,YAAasB,EAASS,QAAQ,GAAG/B,YACjCE,OAAO,IAGT,EAAK8B,gBAAgB,EAAKpC,YAAa0B,EAASS,QAAQ,GAAGE,IA1BlD,wBA4BT,EAAKR,SAAS,CAACvB,OAAO,IA5Bb,4CAlEC,sDAEZ,EAAKgC,MAAQ,CACXvC,UAAMwC,EACNjB,aAASiB,EACTC,UAAMD,EACNN,UAAMM,EACNR,aAASQ,EACTpC,cAAUoC,EACVrC,cAAUqC,EACVnC,YAAa,GACbE,OAAO,GAIT,EAAKN,YAAc,CACjByC,aAAc,kBACdC,QAAS,WACTC,KAAM,mBACNC,KAAM,UACNC,WAAY,SACZC,MAAO,eACPC,OAAQ,cAtBE,E,uDA0BHb,GAET,OADWc,KAAKC,MAAMf,EAAO,U,sCAIfgB,EAAOC,GACrB,QAAO,GACL,KAAKA,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAYyC,eACvC,MAEA,KAAKU,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY0C,UACvC,MAEA,KAAKS,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY2C,OACvC,MAEA,KAAKQ,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY4C,OACvC,MAEA,KAAKO,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY6C,aACvC,MAEA,KAAiB,MAAZM,EACHC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY8C,QACvC,MAEA,KAAKK,GAAW,KAAOA,GAAW,IAChCC,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY+C,SACvC,MAEA,QACEK,KAAKvB,SAAS,CAACW,KAAKY,KAAKpD,YAAY+C,Y,+BAqCzC,OACE,sBAAKnD,UAAU,MAAf,UACE,cAAC,EAAD,CAAMa,YAAe2C,KAAKrC,WAAYT,MAAS8C,KAAKd,MAAMhC,QAC1D,cAAC,EAAD,CACEP,KAAMqD,KAAKd,MAAMvC,KACjBuB,QAAW8B,KAAKd,MAAMhB,QACtBrB,aAAgBmD,KAAKd,MAAMP,QAC3B5B,SAAYiD,KAAKd,MAAMnC,SACvBD,SAAYkD,KAAKd,MAAMpC,SACvBE,YAAegD,KAAKd,MAAMlC,YAC1BJ,YAAeoD,KAAKd,MAAME,c,GA/GlBa,IAAMC,WCATC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17739c50.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container text-light\">\n            <div className=\"cards pt-4\">\n                <h1>\n                    {props.city}{/* {props.country} */}\n                </h1>\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`} />\n                </h5>\n\n                {\n                props.temp_celsius ? \n                    ( <h1 className=\"py2\">{props.temp_celsius}&deg;</h1>) : null \n                }\n\n                {/* Mostrar max e min  */}\n                {minmaxTemp(props.temp_min, props.temp_max)}\n\n                <h4 className=\"py-3\">{props.description}</h4>\n            </div>\n        </div>\n    );\n}\n\nfunction minmaxTemp(min, max) {\n\n    if(min && max) {\n        return(\n            <h3>\n                <span className=\"px-4\">{min}&deg;</span>\n                <span className=\"px-4\">{max}&deg;</span>\n            </h3>\n        );\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport './form.style.css';\n\nconst Form = (props) => {\n    return (\n        <div className=\"container\">\n            <div>{props.error ? error() : null}</div>\n            <form onSubmit={props.loadweather}>\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-2\">\n                        <input \n                            type=\"text\" \n                            className=\"form-control\" \n                            name=\"city\" \n                            autoComplete=\"off\" \n                            placeholder=\"Cidade\"\n                        />\n                    </div>\n                    <div className=\"col-md-3\">\n                        <input \n                            type=\"text\" \n                            className=\"form-control\" \n                            name=\"country\" \n                            autoComplete=\"off\" \n                            placeholder=\"País\"\n                        />\n                    </div>\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n                        <button className=\"btn btn-warning\">E a previsão é?</button>\n                    </div>\n                </div>\n            </form>\n        </div>   \n    );\n};\n\nfunction error() {\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Por favor entre com a cidade e o país!\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './components/weather.component';\nimport Form from './components/form.component';\n\n// chamar api em api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_key = \"235bda840484f67b319f6674921481e5\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch(true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n      break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n      break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon:this.weatherIcon.Rain});\n      break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n      break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n      break;\n\n      case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear});\n      break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n      break;\n\n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n    \n      const response = await api_call.json();\n  \n      console.log(\"teste: \" + response);\n  \n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n  \n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id); \n    } else {\n      this.setState({error: true});\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\"> \n        <Form loadweather = {this.getWeather} error = {this.state.error} />\n        <Weather \n          city={this.state.city} \n          country = {this.state.country}\n          temp_celsius = {this.state.celsius}\n          temp_max = {this.state.temp_max} \n          temp_min = {this.state.temp_min}\n          description = {this.state.description}\n          weatherIcon = {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}